package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedList;

import javax.swing.JPanel;

import control.Controller;
import model.Shapes;
import var.Vars;

@SuppressWarnings("serial")
public class MyPanel extends JPanel{
	int x1,x2,y1,y2;
	public MyPanel() {
		addMouseListener(new MouseAdapter() {
			@Override
			public void mousePressed(MouseEvent e) {
				x1=e.getX();
				y1=e.getY();
				x2=x1;
				y2=y1;
			}
			public void mouseReleased(MouseEvent e) {
				x2 = e.getX();
				y2 = e.getY();
				Vars.controller.finishShapeJob(x1, y1, x2, y2);
				repaint();
			}
		});
		addMouseMotionListener(new MouseAdapter() {
			public void mouseDragged(MouseEvent e) {
				x2 = e.getX();
				y2 = e.getY();
				repaint();
			}
		});
	}
	protected void paintComponent(Graphics graphics) {
		super.paintComponent(graphics);
		Font font = new Font("楷体", Font.BOLD, 50);
		graphics.setFont(font);
		
		LinkedList<Shapes> jobList = Vars.controller.getShapeJobList();
		for(Shapes shape : jobList) {
			setBackground(shape.getBackColor());
			graphics.setColor(shape.getForeColor());
			int type = shape.getType();
			if(type == Controller.RECT) {
				graphics.drawRect(Math.min(shape.getX1(), shape.getX2()), Math.min(shape.getY1(), shape.getY2()), Math.abs(shape.getX1()-shape.getX2()), Math.abs(shape.getY1()-shape.getY2()));
				
			}
			else if(type == Controller.OVAL) {
				graphics.drawOval(Math.min(shape.getX1(), shape.getX2()), Math.min(shape.getY1(), shape.getY2()), Math.abs(shape.getX1()-shape.getX2()), Math.abs(shape.getY1()-shape.getY2()));
				
			}
			else if(type == Controller.TEXT) {
				graphics.drawString(Vars.northPanel.getTextField().getText(), shape.getX1(), shape.getY1());
				
			}
		}
	}
}
